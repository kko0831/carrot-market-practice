// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  phone            String?       @unique
  email            String?       @unique
  name             String
  avatar           String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  tokens           Token[]
  products         Product[]
  favs             Fav[]
  sales            Sale[]
  purchases        Purchase[]
  posts            Post[]
  answers          Answer[]
  wonderings       Wondering[]
  writtenReviews   Review[]      @relation("writtenReviews") // 유저가 구매자일때는 리뷰를 쓴다.
  receivedReviews  Review[]      @relation("receivedReviews") // 유저가 판매자일때 리뷰를 받는다.
  records          Record[]
  streams          Stream[]
  messages         Message[]
  sellerchats      SellerChat[]
  chatrooms_buyer  ChatRoom[]    @relation(name: "buyer")
  chatrooms_seller ChatRoom[]    @relation(name: "seller")
  Reservations     Reservation[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // deleting child record deletes parent record. i.e., deleting user record deletes token record.
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  image          String
  name           String
  price          Int
  description    String        @db.MediumText
  isSold         Boolean       @default(false)
  isReserved     Boolean       @default(false)
  favs           Fav[]
  sales          Sale[]
  purchases      Purchase[]
  records        Record[]
  productReviews Review[]      @relation(name: "productReviews")
  chatRoom       ChatRoom[]    @relation(name: "product")
  Reservations   Reservation[]
}

model Fav {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Sale {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Purchase {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Post {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  question   String      @db.MediumText
  latitude   Float?
  longitude  Float?
  answers    Answer[]
  wonderings Wondering[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  score        Int      @default(1)
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  productFor   Product  @relation(name: "productReviews", fields: [productForId], references: [id], onDelete: Cascade)
  productForId Int      @default(1)
}

// model SellerChat {
//   id                     Int      @id @default(autoincrement())
//   createdAt              DateTime @default(now())
//   updatedAt              DateTime @updatedAt
//   user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade) // buyer
//   userId                 Int      @default(1)
//   chatMsg                String   @db.MediumText
//   chatRoom               ChatRoom @relation(name: "sellerChat", fields: [chatRoomId], references: [id], onDelete: Cascade)
//   chatRoomId             Int      @default(1)
//   // chatRoomForRecentMsg   ChatRoom @relation(name: "sellerChatForRecentMsg", fields: [chatRoomForRecentMsgId], references: [id], onDelete: Cascade)
//   // chatRoomForRecentMsgId Int      @unique @default(1)
//   chatRoomForRecentMsg   ChatRoom? @relation(name: "sellerChatForRecentMsg")
//   isNew                  Boolean?
// }

// model ChatRoom {
//   id         Int          @id @default(autoincrement())
//   createdAt  DateTime     @default(now())
//   updatedAt  DateTime     @updatedAt
//   product    Product      @relation(name: "product", fields: [productId], references: [id], onDelete: Cascade)
//   productId  Int          @default(1)
//   buyer      User         @relation(name: "buyer", fields: [buyerId], references: [id], onDelete: Cascade)
//   buyerId    Int          @default(1)
//   seller     User         @relation(name: "seller", fields: [sellerId], references: [id], onDelete: Cascade)
//   sellerId   Int          @default(1)
//   recentMsg  SellerChat?  @relation(name: "sellerChatForRecentMsg", fields: [recentMsgId], references: [id])
//   recentMsgId Int?        @unique
//   sellerChat SellerChat[] @relation(name: "sellerChat")
//   newCount   Int?
// }

//sellerChat은 chatMessage
model SellerChat {
  id                   Int       @id @default(autoincrement())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade) // speaker
  userId               Int       @default(1)
  chatMsg              String    @db.MediumText
  chatRoom             ChatRoom  @relation(name: "sellerChat", fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId           Int       @default(1)
  chatRoomForRecentMsg ChatRoom? @relation(name: "recentMsg")
  isNew                Boolean?
}

model ChatRoom {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  product     Product      @relation(name: "product", fields: [productId], references: [id], onDelete: Cascade)
  productId   Int          @default(1)
  buyer       User         @relation(name: "buyer", fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId     Int          @default(1)
  seller      User         @relation(name: "seller", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId    Int          @default(1)
  recentMsg   SellerChat?  @relation(name: "recentMsg", fields: [recentMsgId], references: [id])
  recentMsgId Int?         @unique
  sellerChat  SellerChat[] @relation(name: "sellerChat")
  newCount    Int?
}

model Stream {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  description   String    @db.MediumText
  price         Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  messages      Message[]
  cloudflareId  String    @default("a")
  cloudflareUrl String    @default("a")
  cloudflareKey String    @default("a")
  replayVideoId String    @default("a")
  live          Boolean   @default(false)
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   String   @db.MediumText
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
}

model Reservation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

// 중복되는 형태의 모델을 Enum과 Kind를 통해 하나의 모델로 처리
model Record {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  kind      Kind
}

enum Kind {
  Purchase
  Sale
  Fav
}

model TimezoneTest {
  id     Int    @id @default(autoincrement())
  author String
  title  String

  // for mysql, db의 로컬 타임을 이용한다. 현재는 TZ="asis/seoul"
  createdAt DateTime @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt DateTime @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  //// for postgresql to use local time
  // createdAtPG DateTime @default(dbgenerated("timezone('Asia/Seoul'::text, now())")) @db.Timestamp(6)
  // updatedAtPG DateTime @default(dbgenerated("timezone('Asia/Seoul'::text, now())")) @db.Timestamp(6)
}

// https://hyunseo-fullstackdiary.tistory.com/m/155
